@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

<header ref="elem" class="@GetClass()">
    @ChildContent
</header>

@functions {

    [Parameter]
    RenderFragment ChildContent { get; set; }

    [Parameter]
    bool Fixed { get; set; }

    [Parameter]
    bool Short { get; set; }

    [Parameter]
    bool Collapsed { get; set; }

    [Parameter]
    bool Prominent { get; set; }

    [Parameter]
    bool Dense { get; set; }

    [Parameter]
    string ScrollTarget { get; set; }

    [Parameter]
    string Class { get; set; }

    private string GetClass()
    {
        List<string> classes = new List<string> { "mdc-top-app-bar" };

        if (Fixed)
        {
            classes.Add("mdc-top-app-bar--fixed");
        }

        if (Short)
        {
            classes.Add("mdc-top-app-bar--short");
        }

        if (Collapsed)
        {
            classes.Add("mdc-top-app-bar--short-collapsed");
        }

        if (Prominent)
        {
            classes.Add("mdc-top-app-bar--prominent");
        }


        if (Dense)
        {
            classes.Add("mdc-top-app-bar--dense");
        }


        if (!string.IsNullOrWhiteSpace(Class))
        {
            classes.Add(Class.Trim());
        }

        return string.Join(" ", classes);
    }

    ElementRef elem;
    bool isFirstRender = true;

    protected override async Task OnAfterRenderAsync()
    {
        if (isFirstRender)
        {
            isFirstRender = false;
            await jsRuntime.InvokeAsync<object>("Materialium.topAppBar.init", elem, ScrollTarget);
        }
    }
}