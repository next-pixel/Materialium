@using Microsoft.JSInterop
@inject IJSRuntime jsRuntime

<div ref="elem" class="@GetClass()" role="alertdialog" aria-modal="true" style="@Style">
    @ChildContent
</div>

@functions {

    [Parameter]
    RenderFragment ChildContent { get; set; }

    [Parameter]
    bool IsOpen { get; set; }

    [Parameter]
    bool Scrollable { get; set; }

    [Parameter]
    bool Stacked { get; set; }

    [Parameter]
    string Class { get; set; }

    [Parameter]
    string Style { get; set; }

    [Parameter]
    EventCallback Opening { get; set; }

    [Parameter]
    EventCallback Opened { get; set; }

    [Parameter]
    EventCallback Closing { get; set; }

    [Parameter]
    EventCallback Closed { get; set; }

    private string GetClass()
    {
        List<string> classes = new List<string> { "mdc-dialog" };

        if (Scrollable)
        {
            classes.Add("mdc-dialog--scrollable");
        }

        if (Stacked)
        {
            classes.Add("mdc-dialog--stacked");
        }

        if (!string.IsNullOrWhiteSpace(Class))
        {
            classes.Add(Class.Trim());
        }

        return string.Join(" ", classes);
    }

    ElementRef elem;

    protected override async Task OnAfterRenderAsync()
    {
        if (IsOpen)
        {
            IsOpen = false;
            await jsRuntime.InvokeAsync<object>("Materialium.dialog.show", elem, Opening, Opened, Closing, Closed);
        }
    }
}
