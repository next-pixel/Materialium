@if (string.IsNullOrWhiteSpace(HRef))
{
    if (Disabled)
    {
        <button class="@GetClass()" style="@Style" title="@Title"  onmousedown="@OnMouseDown" onmouseup="@OnMouseUp" onkeyup="@OnKeyUp" onkeydown="@OnKeyDown" onkeypress="@OnKeyPress" onclick="@OnClick" disabled>
            @ChildContent
        </button>
    }
    else
    {
        <button class="@GetClass()" style="@Style" title="@Title"  onmousedown="@OnMouseDown" onmouseup="@OnMouseUp" onkeyup="@OnKeyUp" onkeydown="@OnKeyDown" onkeypress="@OnKeyPress" onclick="@OnClick">
            @ChildContent
        </button>
    }
}
else
{
    <a class="@GetClass()" style="@Style" title="@Title" href="@HRef" target="@Target"  onmousedown="@OnMouseDown" onmouseup="@OnMouseUp" onkeyup="@OnKeyUp" onkeydown="@OnKeyDown" onkeypress="@OnKeyPress" onclick="@OnClick">
        @ChildContent
    </a>
}

@functions {

    [Parameter]
    RenderFragment ChildContent { get; set; }

    [Parameter]
    string Class { get; set; } = "material-icons";

    [Parameter]
    string Style { get; set; }

    [Parameter]
    bool Disabled { get; set; }

    [Parameter]
    string HRef { get; set; }

    [Parameter]
    string Target { get; set; }

    [Parameter]
    string Title { get; set; }

    [Parameter]
    EventCallback<UIMouseEventArgs> OnClick { get; set; }
    [Parameter]
    EventCallback<UIMouseEventArgs> OnMouseUp { get; set; }
    [Parameter]
    EventCallback<UIMouseEventArgs> OnMouseDown { get; set; }
    [Parameter]
    EventCallback<UIKeyboardEventArgs> OnKeyPress { get; set; }
    [Parameter]
    EventCallback<UIKeyboardEventArgs> OnKeyDown { get; set; }
    [Parameter]
    EventCallback<UIKeyboardEventArgs> OnKeyUp { get; set; }


    string GetClass()
    {
        List<string> classes = new List<string> { "mdc-icon-button", "mdc-card__action", "mdc-card__action--icon" };

        if (!string.IsNullOrWhiteSpace(Class))
        {
            classes.Add(Class.Trim());
        }

        return string.Join(" ", classes);
    }
}